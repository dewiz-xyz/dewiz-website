.header {
  grid-area: header;
  position: sticky;
  top: 0;
  z-index: 3;
}

.header__bg {
  grid-area: header;
  grid-column-start: 1;
  grid-column-end: 4;

  z-index: 2;
  position: sticky;
  top: 0;

  backdrop-filter: blur(10px);
  background: linear-gradient(
      to bottom,
      var(--bg-color-0-start) 0%,
      transparent var(--header-height)
    ),
    hsla(var(--bg-color-0-hsl), 0.9);

  --duration: 0.125s;
  --timing: ease;
  transition: color var(--duration) var(--timing),
    background-color var(--duration) var(--timing);
  box-shadow: 0 1px 8px -4px var(--shadow-color);
}

.header__content {
  display: grid;
  height: var(--header-height);
  gap: var(--spacing-16);
  padding: var(--spacing-4) 0;

  grid-template-columns: auto 1fr;
  grid-template-areas: "logo nav";
  align-items: center;

  position: relative;
  z-index: 1;
}

.header a {
  color: var(--fg-color-link);
  font-size: var(--font-size-sm);
}

.header a:hover {
  text-decoration: underline;
}

.header ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.logo {
  grid-area: logo;
  transform: translateY(-10%);
}

.logo .logo__hat_s {
  display: none;
}

.logo svg {
  height: 3rem;
}

.logo > a {
  display: block;
}

.nav {
  grid-area: nav;
  justify-self: end;
}

.nav > ul {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  gap: var(--spacing-16);
}

@media (max-width: 767.98px) {
  .logo .logo__hat_s {
    display: block;
  }

  .logo .logo__full {
    display: none;
  }

  .logo svg {
    height: 2rem;
  }
}

.mobile_nav {
  display: none;
  margin-inline-start: auto;
}

.toggle_content {
  position: absolute;
  inset: calc(var(--header-height) * 4 / 5) calc(-1 * var(--min-gutter)) auto;
  padding: var(--spacing-4) var(--min-gutter);
  z-index: 4;

  backdrop-filter: blur(10px);
  background: linear-gradient(
      to bottom,
      var(--bg-color-0-start) 0%,
      transparent var(--header-height)
    ),
    var(--bg-overlay-menu);

  --duration: 0.125s;
  --timing: ease;
  transition: opacity var(--duration) var(--timing);
  pointer-events: none;
}

.toggle_content > ul {
  display: grid;
  gap: var(--spacing-4);
  text-align: center;
}


.toggle,
.close_toggle {
  display: none;
}

.toggle_label {
  cursor: pointer;
  position: relative;
  z-index: 3;
  color: var(--fg-color-link);
  padding: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}


.hamburger {
  width: 24px;
  height: 18px;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.hamburger_line {
  width: 100%;
  height: 2px;
  background-color: var(--fg-color-link);
  transition: all 0.3s ease;
  transform-origin: center;
}


/* Default state - menu hidden */
.toggle_content {
  opacity: 0;
  --duration: 0.125s;
  --timing: ease;
  transition: opacity var(--duration) var(--timing);
  pointer-events: none;
}

/* Show menu when toggle is checked */
.toggle:checked ~ .toggle_label {
  color: var(--fg-color-0);
}

/* Hamburger to X animation */
.toggle:checked ~ .toggle_label .hamburger_line:nth-child(1) {
  transform: rotate(45deg) translate(6px, 6px);
}

.toggle:checked ~ .toggle_label .hamburger_line:nth-child(2) {
  opacity: 0;
  transform: scaleX(0);
}

.toggle:checked ~ .toggle_label .hamburger_line:nth-child(3) {
  transform: rotate(-45deg) translate(6px, -6px);
}

/**
 * Dirty hack to collapse the menu when clicking on anywhare on the page.
 * Make the toggle label to ocuppy the entire screen.
 * Notice that the menu content has a z-index larger than the label, so it
 * will still be clickable.
 */

.close_label {
  position: absolute;
  inset: 0;
  cursor: pointer;
  pointer-events: none;
  z-index: 5;
}

.close_label::before {
  content: "";
  position: fixed;
  inset: 0;
  background: transparent;
  pointer-events: none;
  --duration: 0.125s;
  --timing: ease;
  transition: background var(--duration) var(--timing);
}

.toggle:checked ~ .close_label {
  pointer-events: initial;
}

.toggle:checked ~ .close_label::before {
  background: hsla(var(--bg-color-0-hsl), 0.15);
  pointer-events: initial;
}

/* Show menu when toggle is checked and no close toggle is checked */
.toggle:checked ~ .toggle_content {
  opacity: 1;
  pointer-events: initial;
}

/* Override: hide menu when any close toggle is checked */
.close_toggle:checked ~ .toggle_content {
  opacity: 0 !important;
  pointer-events: none !important;
}


@media (max-width: 629.98px) {
  .nav {
    display: none;
  }

  .mobile_nav {
    display: block;
  }
}
